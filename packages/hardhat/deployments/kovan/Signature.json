{
  "address": "0x5f4F053F0cD85D0b82D3B7b25D783793A7563964",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "getHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "recover",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4455b47cad709d033bb7020242b1c73a9f79c4a0d8d4ba0a08373f39703f88de",
  "receipt": {
    "to": null,
    "from": "0x66C2543F4dF830C313a39972A343403127b2A9EB",
    "contractAddress": "0x5f4F053F0cD85D0b82D3B7b25D783793A7563964",
    "transactionIndex": 2,
    "gasUsed": "413959",
    "logsBloom": "0x
    "blockHash": "0x8fa7f634eb60d4109d21859c3d9831ae54bf6d209879c6aa1ef01fee625975f0",
    "transactionHash": "0x4455b47cad709d033bb7020242b1c73a9f79c4a0d8d4ba0a08373f39703f88de",
    "logs": [],
    "blockNumber": 24216058,
    "cumulativeGasUsed": "517880",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "36e8fca3866cf5cf000ccac16b7ac810",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getHash(string)\":{\"notice\":\"Given the original message, returns it's hash\"},\"recover(bytes32,bytes)\":{\"notice\":\"Get signer address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Signature.sol\":\"Signature\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x94c4719c16ffb96dd3cdc68f6fbf78105153018adbf382241821e8188e6a4bd5\",\"license\":\"MIT\"},\"contracts/Signature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n// Credits: https://programtheblockchain.com/posts/2018/02/17/signing-and-verifying-messages-in-ethereum/\\n// Credits: https://docs.openzeppelin.com/contracts/2.x/utilities#cryptography\\n// Credits: The legendary Austing Griffith: https://github.com/austintgriffith/scaffold-eth/blob/signature-recover/packages/hardhat/contracts/YourContract.sol\\n// Credits: This issue: https://github.com/ethers-io/ethers.js/issues/468#issuecomment-475990764\\n\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\n\\nlibrary Signature {\\n    using ECDSA for bytes32;\\n\\n    /**\\n     * Given the original message, returns it's hash\\n     */\\n    function getHash(string memory message) public view returns (bytes32) {\\n      return keccak256(abi.encode(message));\\n    }\\n\\n    /**\\n     * Get signer address\\n     */\\n    function recover(bytes32 hash, bytes memory signature) public pure returns (address) {\\n      return hash.toEthSignedMessageHash().recover(signature);\\n    }\\n\\n    function getAddress(string memory message, bytes memory signature) public view returns (address) {\\n        bytes32 hash = getHash(message);\\n        address signer = recover(hash, signature);\\n        return signer;\\n    }\\n}\\n\",\"keccak256\":\"0xdd10b6f7eb5a171b1a9aabb836897977b9a03c242eda177f66b4238964f62ff4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610687610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806319045a25146100505780635b6beeb914610117578063a3bb7d17146101cd575b600080fd5b6100fb6004803603604081101561006657600080fd5b81359190810190604081016020820135600160201b81111561008757600080fd5b82018360208201111561009957600080fd5b803590602001918460018302840111600160201b831117156100ba57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102f6945050505050565b604080516001600160a01b039092168252519081900360200190f35b6101bb6004803603602081101561012d57600080fd5b810190602081018135600160201b81111561014757600080fd5b82018360208201111561015957600080fd5b803590602001918460018302840111600160201b8311171561017a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610312945050505050565b60408051918252519081900360200190f35b6100fb600480360360408110156101e357600080fd5b810190602081018135600160201b8111156101fd57600080fd5b82018360208201111561020f57600080fd5b803590602001918460018302840111600160201b8311171561023057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561028257600080fd5b82018360208201111561029457600080fd5b803590602001918460018302840111600160201b831117156102b557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103a4945050505050565b600061030b82610305856103c7565b90610418565b9392505050565b6000816040516020018080602001828103825283818151815260200191508051906020019080838360005b8381101561035557818101518382015260200161033d565b50505050905090810190601f1680156103825780820380516001836020036101000a031916815260200191505b5092505050604051602081830303815290604052805190602001209050919050565b6000806103b084610312565b905060006103be82856102f6565b95945050505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b60008151604114610470576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a61048e86828585610498565b9695505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156104f95760405162461bcd60e51b815260040180806020018281038252602281526020018061060e6022913960400191505060405180910390fd5b8360ff16601b148061050e57508360ff16601c145b6105495760405162461bcd60e51b81526004018080602001828103825260228152602001806106306022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156105a5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166103be576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fdfe45434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c7565a2646970667358221220189d1534fa9f41f0f261d704f3daaf181c270074bcb33d6784cbfcbb7bde575f64736f6c634300060c0033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806319045a25146100505780635b6beeb914610117578063a3bb7d17146101cd575b600080fd5b6100fb6004803603604081101561006657600080fd5b81359190810190604081016020820135600160201b81111561008757600080fd5b82018360208201111561009957600080fd5b803590602001918460018302840111600160201b831117156100ba57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102f6945050505050565b604080516001600160a01b039092168252519081900360200190f35b6101bb6004803603602081101561012d57600080fd5b810190602081018135600160201b81111561014757600080fd5b82018360208201111561015957600080fd5b803590602001918460018302840111600160201b8311171561017a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610312945050505050565b60408051918252519081900360200190f35b6100fb600480360360408110156101e357600080fd5b810190602081018135600160201b8111156101fd57600080fd5b82018360208201111561020f57600080fd5b803590602001918460018302840111600160201b8311171561023057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561028257600080fd5b82018360208201111561029457600080fd5b803590602001918460018302840111600160201b831117156102b557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103a4945050505050565b600061030b82610305856103c7565b90610418565b9392505050565b6000816040516020018080602001828103825283818151815260200191508051906020019080838360005b8381101561035557818101518382015260200161033d565b50505050905090810190601f1680156103825780820380516001836020036101000a031916815260200191505b5092505050604051602081830303815290604052805190602001209050919050565b6000806103b084610312565b905060006103be82856102f6565b95945050505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b60008151604114610470576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a61048e86828585610498565b9695505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156104f95760405162461bcd60e51b815260040180806020018281038252602281526020018061060e6022913960400191505060405180910390fd5b8360ff16601b148061050e57508360ff16601c145b6105495760405162461bcd60e51b81526004018080602001828103825260228152602001806106306022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156105a5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166103be576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fdfe45434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c7565a2646970667358221220189d1534fa9f41f0f261d704f3daaf181c270074bcb33d6784cbfcbb7bde575f64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getHash(string)": {
        "notice": "Given the original message, returns it's hash"
      },
      "recover(bytes32,bytes)": {
        "notice": "Get signer address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}